arrayIssue[i] <- val$key
i = i+1
}
arrayIssue
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=all',
verbose()
)
checkList <- content(req2)
View(checkList)
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=comments',
verbose()
)
checkList <- content(req2)
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=changelog',
verbose()
)
checkList <- content(req2)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=changelog,history',
verbose()
)
checkList <- content(req2)
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=*all',
verbose()
)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=all',
verbose()
)
checkList <- content(req2)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)&expand=changelog',
verbose()
)
issueList <- content(req)
issueList <- issueList$issues
View(issueList)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)&expand=changelog&fields=comments,summary',
verbose()
)
issueList <- content(req)
issueList <- issueList$issues
View(issueList)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)&expand=changelog&fields=comment,summary',
verbose()
)
issueList <- content(req)
issueList <- issueList$issues
View(issueList)
library(tinytex)
tinytex::install_tinytex().
tinytex::install_tinytex()
install.packages("tlmgr")
tinytex::install_tinytex()
library(tlmgr)
install.packages("tlmgr")
library(tinytex)
uninstall_tinytex(force = TRUE)
install_tinytex(force = TRUE)
tinytex::reinstall_tinytex()
remove.packages("tinytex", lib="~/R/win-library/4.0")
install_tinytex(force = TRUE)
library(tinytex)
install.packages("tinytex")
tinytex::install_tinytex()
library(tinytex)
tinytex:::is_tinytex()
remove.packages("tinytex", lib="~/R/win-library/4.0")
tinytex::reinstall_tinytex()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("html_table")
install.packages("html_table")
install.packages(html_table);
install.packages("html_table");
install.packages("html_table");
install.packages("html_table");
install.packages("Rtools")
install.packages("tidyverse");
gc()
install.packages("tidyquant")
library(tidyquant);
library(tidyverse);
getSymbols(tickers_name_in_portfolio,
from = "2017-01-01",
to = "2017-01-15")
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG");
getSymbols(tickers_name_in_portfolio,
from = "2017-01-01",
to = "2017-01-15")
getSymbols(tickers_name_in_portfolio,
from = "2021-01-01",
to = "2021-01-15")
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG");
getSymbols(tickers_name_in_portfolio,
from = "2021-01-01",
to = "2021-01-15")
View(AMD)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
prices <- map(tickers_name_in_portfolio,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
View(prices)
View(prices)
View(AMD)
tq_get('AAPL',
from = "2017-01-01",
to = "2018-03-01",
get = "stock.prices")
tq_get(tickers_name_in_portfolio,
from = "2021-08-15",
to = "2021-08-17",
get = "stock.prices")
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG")>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
tickers_name_in_portfolio
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG") %>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
tickers_name_in_portfolio
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG") %>%
tq_get(get  = "stock.prices",
from = "2021-01-01",
to   = "2021-08-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
tickers_name_in_portfolio
install.packages("Dataquest")
install.packages("Dataquest")
install.packages('rvest')
#install.packages('rvest')
library(tidyverse, rvest)
#Specifying the url for desired website to be scraped
url <- "https://www.barbora.lv/"
#Reading the HTML code from the website
webpage <- read_html(url)
#Loading the rvest package
library('rvest')
#Reading the HTML code from the website
webpage <- read_html(url)
View(webpage)
xml_child(webpage, 2)
xml_attrs(webpage)
webpage
#Specifying the url for desired website to be scraped
url <- "https://www.barbora.lv/produkti/lasis-1-3-kg-atdzesets-sver"
#Reading the HTML code from the website
webpage <- read_html(url)
webpage
webpage[1]
webpage[2]
webpage[[1]]
#Specifying the url for desired website to be scraped
url <- "https://www.barbora.lv/meklet?q=lasis"
#Reading the HTML code from the website
webpage <- read_html(url)
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
#Loading the rvest package
library('rvest')
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
# library(readr)
library(magrittr)
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -15
))
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -15
))
getwd()
shiny::runApp('C:/Users/farkhild/OneDrive - TietoEVRY/Desktop/GIT/R/car_market_analysis/app/car_market_analysis')
library(readr)
library(magrittr)
library(tidyverse)
library(rvest)
library(janitor)
library(ggplot2)
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -12
))
#
library(readr)
library(magrittr)
library(tidyverse)
library(rvest)
library(janitor)
library(ggplot2)
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -12
))
i used rvest since i search the easier way to parse this site. without docker container etc
# i used rvest since i search the easier way to parse this site. without docker container etc
# find brands
data_brands <- read_html("https://www.ss.com/lv/transport/cars/sell/filter/") %>%
html_elements('.category') %>% {.[1:40]}
# based data category and links to search.
check_data <- data.frame(
brand = data_brands %>% html_text2(),
link =
paste0('https://www.ss.com/',data_brands %>% html_elements('a') %>% html_attr('href'))
)
total_data <- data.frame()
# for each brand i go through pages
for (brand in c(1:nrow(check_data))) { # c(1:nrow(check_data))
Sys.sleep(2)
print(check_data$brand[brand])
link <- check_data$link[brand]
# randomly chosen page, if .navia class is not the same as number of page then break
for (page in c(1:100)) {
Sys.sleep(0.5)
page_link <- paste0(link,"page",page,".html")
print(page_link)
navia_num <- read_html(page_link)
page_num <- navia_num  %>%
#.navia is page number
html_elements('.navia') %>% html_text2()
# if there only 1 page, then we set to loop only first page.
page_num <- ifelse(identical(page_num,character(0)), 1, page_num)
# need to add link to ads
# date of publishing
# vin, plate
# something else (phone maybe)
if (page_num != page) {
break
} else {
t_data <- navia_num %>%
html_nodes(xpath = '//*[@id="filter_frm"]/table[2]') %>%
html_table() %>%
as.data.frame() %>%
select(c(2:8)) %>%
select(-1) %>%
row_to_names(row_number=1) %>%
slice(1:(n()-1)) %>%
mutate(brand = check_data$brand[brand])
# find unique id for advertisement instead of VIN for now
link_and_id_data <- navia_num %>%
html_elements('.d1 a') %>%
html_attr('href') %>%
str_extract("([^\\/]+$)") %>%
str_replace_all(".html","")
# filter duplicated cars
# t_data <- t_data %>% mutate(link = link_and_id_data) %>%
#   filter(link %in% total_data$link)
total_data <- bind_rows(total_data, t_data)
rm(t_data)
}
}
}
#make data great again
total_data_parsed <- total_data %>%
mutate(Cena = str_replace_all(Cena, c(" " = "", "€" = "", "," = "")) %>% as.numeric(),
`Nobrauk.` = str_replace_all(`Nobrauk.`, c("tūkst." = "000", " " ="", "-"= NA,","="")) %>% as.numeric()) %>%
mutate(Gads = as.numeric(Gads))
save(total_data_parsed, file = "data.rda")
#
# write.csv(
#   x = total_data_parsed,
#   file = "ss.csv",
#   fileEncoding = "UTF-8",
#   na = "",
#   row.names = FALSE
# )
shiny::runApp('app/car_market_analysis')
total_data_parsed %>% mutate(bucket = rnom(n(),price , 0.5))
total_data_parsed %>% mutate(bucket = rnorm(n(),price , 0.5))
total_data_parsed %>% mutate(bucket = rnorm(n(),Cena , 0.5))
total_data_parsed %>% mutate(bucket = rnorm(n(),Cena , 1))
total_data_parsed %>% mutate(bucket = cut(Cena, 10))
total_data_parsed %>% mutate(bucket = cut(Cena, 100))
x<-  total_data_parsed %>% mutate(bucket = cut(Cena, 100))
View(x)
x<-  total_data_parsed %>% mutate(bucket = cut(Cena, 2))
View(x)
seq(1,1000000,by=1000)
seq(0,1000000,by=1000)
seq(0,1000000,by=10000)
seq(0,Inf,by=10000)
seq(0,100000,by=10000)
seq(0,1000000,by=10000)
total_data_parsed %>% mutate(bucket = cut(Cena, breaks = seq(0,1000000,by=10000)))
total_data_parsed %>% mutate(bucket = cut(Cena, breaks = seq(0,1000000,by=10000) , labels =  seq(0,1000000,by=10000)))
total_data_parsed %>% mutate(bucket = cut(Cena, breaks = seq(0,1000000,by=10000) , labels = FALSE))
total_data_parsed %>% mutate(bucket = cut(Cena, breaks = seq(0,1000000,by=10000) , labels = TRUE))
seq(0,1000000,by=10000)
cut(Cena, breaks = seq(0,1000000,by=10000))
total_data_parsed %>% mutate(bucket = cut(Cena, breaks = seq(0,1000000,by=10000)))
с(-Inf, seq(0,1000000,by=10000), Inf)
с(-Inf, seq(0,1000000,by=10000), Inf)
total_data_parsed %>% mutate(bucket = cut(Cena, breaks = с(-Inf, seq(0,1000000,by=10000), Inf) ))
с(-Inf, 10000, Inf)
с(-Inf, seq(0,1000000,by=10000),+Inf)
x <- c(-Inf, +Inf)
runApp('app/car_market_analysis')
c(-Inf,seq(0,1000000,by=10000), +Inf)
c(-Inf,seq(0,100000,by=10000), +Inf)
options(scipen = 999)
c(-Inf,seq(0,100000,by=10000), +Inf)
x<-  total_data_parsed %>% mutate(bucket = cut(Cena, breaks = c(-Inf,seq(0,100000,by=10000), +Inf) ))
View(x)
as.character(seq(0,100000,by=10000))
x<-  total_data_parsed %>% mutate(bucket = cut(Cena, breaks = c(-Inf,seq(0,100000,by=10000), +Inf), labels = as.character(seq(0,100000,by=10000)) ))
lenght(c(-Inf,seq(0,100000,by=10000), +Inf))
length(c(-Inf,seq(0,100000,by=10000), +Inf))
length(c(seq(0,100000,by=10000)))
x<-  total_data_parsed %>% mutate(bucket = cut(Cena, breaks = c(-Inf,seq(0,100000,by=10000), +Inf), labels = as.character(c("low",seq(0,100000,by=10000),"max" ) ))
} else {
x<-  total_data_parsed %>% mutate(bucket = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=10000), +Inf),
labels = as.character(c("low",seq(0,100000,by=10000),"max" ) )))
x<-  total_data_parsed %>% mutate(bucket = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=10000), +Inf),
labels = as.character(c("low",seq(0,100000,by=10000)) )))
View(x)
x<-  total_data_parsed %>% mutate(bucket = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=10000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=10000)) )))
x<-  total_data_parsed %>% mutate(bucket = as.vecotr(cut(Cena,
breaks = c(-Inf,seq(0,100000,by=10000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=10000)) ))))
x<-  total_data_parsed %>% mutate(bucket = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=10000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=10000)) )))
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=10000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=10000)) ))) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=1000)) ))) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
# reactive event e.g. parse data to html to make it workable with chart.js
dataChartJS_scatter <- eventReactive({
# any changes in input will adjust table
input$year_range
input$car_brand
input$car_model
}, {
# it is required only brand car to do initial dash statistics
req(input$car_brand)
req(input$car_model)
req(input$year_range)
# creat heat map
fun_color_range <- colorRampPalette(c("blue", "red"))
color <- data.frame(
odo = seq(min(total_data_parsed$Nobrauk., na.rm = TRUE),
max(total_data_parsed$Nobrauk., na.rm = TRUE), by = 100000))
color$color <- fun_color_range(nrow(color))
options(dplyr.summarise.inform = FALSE)
if (input$car_brand == "All") {
df_by_price <- total_data_parsed %>%
filter(Gads %in% seq(input$year_range[1], input$year_range[2])) %>%
select(odo = `Nobrauk.`, year = Gads, price = Cena, model = Modelis, brand) %>%
group_by(brand, model, year) %>%
summarise(price = mean(price), odo = mean(odo)) %>%
ungroup()
x <- length(c(seq(0,100000,by=10000)))
options(scipen = 999)
x<-  total_data_parsed %>% mutate(bucket_price = as.numericcut(Cena,
breaks = c(-Inf,seq(0,100000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=1000)) )))) %>%
x<-  total_data_parsed %>% mutate(bucket_price = as.numeric(cut(Cena,
breaks = c(-Inf,seq(0,100000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=1000)) )))) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=1000)) ))) %>%
group_by(bucket_price) %>% summarise(count = n())
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,100000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,100000,by=1000)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,60000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,600000,by=1000)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n())
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,60000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,60000,by=1000)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,80000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,80000,by=1000)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,80000,by=1500), +Inf),
labels = as.character(c(-Inf,seq(0,80000,by=1500)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,50000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,50000,by=1000)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n())
View(x)
x<-  total_data_parsed %>% mutate(bucket_price = cut(Cena,
breaks = c(-Inf,seq(0,50000,by=1000), +Inf),
labels = as.character(c(-Inf,seq(0,50000,by=1000)) ) ),ordered_result = TRUE ) %>%
group_by(bucket_price) %>% summarise(count = n(), avg_sum = mean(Cena))
View(x)
x <-  total_data_parsed %>%
mutate(
bucket_price = cut(
Cena,
breaks = c(-Inf, seq(0, 50000, by =
1000),+Inf),
labels = as.character(paste0("From ", c(-Inf, seq(0, 50000, by =
1000)) ))
),
ordered_result = TRUE
) %>%
group_by(bucket_price) %>% summarise(count = n(), avg_sum = mean(Cena))
View(x)
View(x)
x <-  total_data_parsed %>%
mutate(
bucket_price = cut(
Cena,
breaks = c(-Inf, seq(0, 50000, by =
1000),+Inf),
labels = as.character(c(-Inf, seq(0, 50000, by =
1000)) )
),
ordered_result = TRUE
) %>%
group_by(bucket_price) %>% summarise(count = n(), avg_sum = mean(Cena))
View(x)
x <-  total_data_parsed %>%
mutate(
bucket_price = cut(
Cena,
breaks = c(-Inf, seq(0, 50000, by =
2000),+Inf),
labels = as.character(c(-Inf, seq(0, 50000, by =
2000)) )
),
ordered_result = TRUE
) %>%
group_by(bucket_price) %>% summarise(count = n(), avg_sum = mean(Cena))
View(x)
runApp('app/car_market_analysis')
