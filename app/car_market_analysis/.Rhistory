install.packages(tidyverse)
install.packages(tydiverse)
install.packages("DT")
library(httr)
library(jsonlite)
library("httr")
library("jsonlite")
install.packages("curl")
install.packages("httr")
install.packages("tibble")
install.packages("tidyverse")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("matbmeijer/JirAgileR")
library(JirAgileR, quietly = T)
library(knitr, quietly = T)
library(dplyr, quietly = T)
# Save credentials to pass them only one time
save_jira_credentials(domain = "https://support.lv.tieto.com/")
library("httr")
library("jsonlite")
my_UN <- "ildar.farkhshatov@tieto.com"
my_PW <- "240594Marina!10308"
alldata <- {
req <- GET("https://support.lv.tieto.com/",
path = 'rest/api/2/search?jql=project%20%3D%20CSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(currentUser())%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC',
verbose()
)
api_request_content <- httr::content(req, as = "text")
api_request_content_flat <- jsonlite::fromJSON(api_request_content)
as.data.frame(api_request_content_flat$issues, flatten=T)
}
View(api_request_content_flat)
api_request_content_flat[["errorMessages"]]
source('C:/Users/farkhild/Desktop/GIT/R/jira_reply_statistics.R', echo=TRUE)
View(req)
View(api_request_content_flat)
library("httr")
library("jsonlite")
my_UN <- "ildar.farkhshatov@tieto.com"
my_PW <- "240594Marina!10308"
alldata <- {
req <- GET("https://support.lv.tieto.com/",
path = 'rest/api/2/search?jql=project%20%3D%20CSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(currentUser())%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC',
authenticate(user = my_UN,password = my_PW,type="basic"),
verbose()
)
api_request_content <- httr::content(req, as = "text")
api_request_content_flat <- jsonlite::fromJSON(api_request_content)
as.data.frame(api_request_content_flat$issues, flatten=T)
}
library("httr")
library("jsonlite")
my_UN <- "ildar.farkhshatov@tieto.com"
my_PW <- "240594Marina!10308"
alldata <- {
req <- GET('https://support.lv.tieto.com/rest/api/2/search?jql=project%20%3D%20CSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(currentUser())%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC',
authenticate(user = my_UN,password = my_PW,type="basic"),
verbose()
)
api_request_content <- httr::content(req, as = "text")
api_request_content_flat <- jsonlite::fromJSON(api_request_content)
as.data.frame(api_request_content_flat$issues, flatten=T)
}
library("httr")
library("jsonlite")
my_UN <- "ildar.farkhshatov@tieto.com"
my_PW <- "240594Marina!10308"
req <- GET('https://support.lv.tieto.com/rest/api/2/search?jql=project%20%3D%20CSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(currentUser())%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC',
authenticate(user = my_UN,password = my_PW,type="basic"),
verbose()
)
View(req)
x <- content(req)
View(x)
xml_attrs(x)
x <- content(req[["content"]])
req[["content"]]
x <- content(req, as = "text")
print(x)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project=CSS AND status in (Open, "In Progress") AND assignee in (farkhild)',
verbose()
)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)',
verbose()
)
x <- content(req, as = "text")
x
my_UN <- "farkhild"
my_PW <- "240594Marina!10308"
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)',
verbose()
)
x <- content(req, as = "text")
x <- content(req)
View(x)
View(x)
issueList <- content(req)[[issues]]
issueList <- content(req) %>% select(issues)
issueList <- content(req)
issueList <- issueList[[issues]]
issueList <- issueList$issues
View(issueList)
issueList[[1]]
issueList[[1]]$fields$lastViewed
issueList[[1]]$fields$updated
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=changelog',
verbose()
)
checkList <- content(req2)
View(checkList)
View(issueList)
View(issueList)
data <- list()
for (i in length(issueList)) {
data[[i]] <- issueList[[i]]$key
}
View(data)
length(issueList)
for (i in length(issueList)) {
data[[i]] <- issueList[[i]]$key
i++
}
for (i in length(issueList)) {
data[[i]] <- issueList[[i]]$key
i + 1
}
View(data)
for (i in length(issueList)) {
issueList[[i]]$key
}
i = 1
for (i in length(issueList)) {
issueList[[i]]$key
}
for (i in length(issueList)) {
issueList[[i]]$key
i = i+1
}
for (i in length(issueList)) {
print(issueList[[i]]$key)
i = i+1
}
issueList[[1]]$key
for( i in length(issueList)) {
arrayIssue[i] <- issueList[[i]]$key
}
arrayIssue <- c()
for( i in length(issueList)) {
arrayIssue[i] <- issueList[[i]]$key
}
for( i in length(issueList)) {
print(issueList[[i]]$key)
arrayIssue[i] <- issueList[[i]]$key
}
View(issueList)
issueList[[2]]$key
for( i in length(issueList)) {
print(i)
arrayIssue[i] <- issueList[[i]]$key
}
for( val in length(issueList)) {
print(val)
arrayIssue[val] <- issueList[[val]]$key
}
val <- 0
for( val in length(issueList)) {
print(val)
arrayIssue[val] <- issueList[[val]]$key
}
arrayIssue <- c()
for( val in issueList) {
print(val)
arrayIssue[val] <- issueList[[val]]$key
}
arrayIssue <- c()
for( val in issueList) {
arrayIssue[val] <- val$key
}
View(val)
val$key
arrayIssue <- c()
i <-1
for( val in issueList) {
arrayIssue[i] <- val$key
i = i+1
}
arrayIssue
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=all',
verbose()
)
checkList <- content(req2)
View(checkList)
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=comments',
verbose()
)
checkList <- content(req2)
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=changelog',
verbose()
)
checkList <- content(req2)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=changelog,history',
verbose()
)
checkList <- content(req2)
View(checkList)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=*all',
verbose()
)
req2 <-  GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/issue/CSS-112854?expand=all',
verbose()
)
checkList <- content(req2)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)&expand=changelog',
verbose()
)
issueList <- content(req)
issueList <- issueList$issues
View(issueList)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)&expand=changelog&fields=comments,summary',
verbose()
)
issueList <- content(req)
issueList <- issueList$issues
View(issueList)
req <- GET('https://support.lv.tieto.com/',
authenticate(user = my_UN,password = my_PW,type="basic"),
path = 'rest/api/2/search?jql=project%3DCSS%20AND%20status%20in%20(Open%2C%20"In%20Progress")%20AND%20assignee%20in%20(farkhild)&expand=changelog&fields=comment,summary',
verbose()
)
issueList <- content(req)
issueList <- issueList$issues
View(issueList)
library(tinytex)
tinytex::install_tinytex().
tinytex::install_tinytex()
install.packages("tlmgr")
tinytex::install_tinytex()
library(tlmgr)
install.packages("tlmgr")
library(tinytex)
uninstall_tinytex(force = TRUE)
install_tinytex(force = TRUE)
tinytex::reinstall_tinytex()
remove.packages("tinytex", lib="~/R/win-library/4.0")
install_tinytex(force = TRUE)
library(tinytex)
install.packages("tinytex")
tinytex::install_tinytex()
library(tinytex)
tinytex:::is_tinytex()
remove.packages("tinytex", lib="~/R/win-library/4.0")
tinytex::reinstall_tinytex()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("html_table")
install.packages("html_table")
install.packages(html_table);
install.packages("html_table");
install.packages("html_table");
install.packages("html_table");
install.packages("Rtools")
install.packages("tidyverse");
gc()
install.packages("tidyquant")
library(tidyquant);
library(tidyverse);
getSymbols(tickers_name_in_portfolio,
from = "2017-01-01",
to = "2017-01-15")
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG");
getSymbols(tickers_name_in_portfolio,
from = "2017-01-01",
to = "2017-01-15")
getSymbols(tickers_name_in_portfolio,
from = "2021-01-01",
to = "2021-01-15")
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG");
getSymbols(tickers_name_in_portfolio,
from = "2021-01-01",
to = "2021-01-15")
View(AMD)
prices <- map(tickers,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
prices <- map(tickers_name_in_portfolio,function(x) Ad(get(x)))
prices <- reduce(prices,merge)
View(prices)
View(prices)
View(AMD)
tq_get('AAPL',
from = "2017-01-01",
to = "2018-03-01",
get = "stock.prices")
tq_get(tickers_name_in_portfolio,
from = "2021-08-15",
to = "2021-08-17",
get = "stock.prices")
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG")>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
tickers_name_in_portfolio
#load data
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG") %>%
tq_get(get  = "stock.prices",
from = "2010-01-01",
to   = "2015-12-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
tickers_name_in_portfolio
tickers_name_in_portfolio <- c("AMD", "LOGI", "NET", "SPCE", "TSLA", "PM", "GOOGL","ORCL","MSFT","TMUS","PG") %>%
tq_get(get  = "stock.prices",
from = "2021-01-01",
to   = "2021-08-31") %>%
group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "Ra")
tickers_name_in_portfolio
install.packages("Dataquest")
install.packages("Dataquest")
install.packages('rvest')
#install.packages('rvest')
library(tidyverse, rvest)
#Specifying the url for desired website to be scraped
url <- "https://www.barbora.lv/"
#Reading the HTML code from the website
webpage <- read_html(url)
#Loading the rvest package
library('rvest')
#Reading the HTML code from the website
webpage <- read_html(url)
View(webpage)
xml_child(webpage, 2)
xml_attrs(webpage)
webpage
#Specifying the url for desired website to be scraped
url <- "https://www.barbora.lv/produkti/lasis-1-3-kg-atdzesets-sver"
#Reading the HTML code from the website
webpage <- read_html(url)
webpage
webpage[1]
webpage[2]
webpage[[1]]
#Specifying the url for desired website to be scraped
url <- "https://www.barbora.lv/meklet?q=lasis"
#Reading the HTML code from the website
webpage <- read_html(url)
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
#Loading the rvest package
library('rvest')
# Need to parse each category separately
# Chicken
# Maxima
url <- "https://www.barbora.lv/gala-zivs-un-gatava-kulinarija/svaiga-putnu-gala/vistas-gala"
#Reading the HTML code from the website
webpage <- read_html(url)
# library(readr)
library(magrittr)
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -15
))
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -15
))
getwd()
shiny::runApp('C:/Users/farkhild/OneDrive - TietoEVRY/Desktop/GIT/R/car_market_analysis/app/car_market_analysis')
load("C:/Users/farkhild/OneDrive - TietoEVRY/Desktop/GIT/R/car_market_analysis/app/car_market_analysis/.RData")
library(readr)
library(magrittr)
library(tidyverse)
library(rvest)
library(janitor)
library(ggplot2)
setwd(stringr::str_sub(
as.character(rstudioapi::getActiveDocumentContext()$path),
end = -12
))
shiny::runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
runApp('app/car_market_analysis')
